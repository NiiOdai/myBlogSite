const { MongoClient } = require("mongodb");

const uri = "mongodb+srv://admin:admin@cluster0.6rvcr.mongodb.net/myFirstDatabase?retryWrites=true&w=majority";

const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

const blogResolvers = {
    Query: {
        blogs: () => {
            client.connect()
            const collection = client.db("test").collection("blogs");
            results = collection.find({}).toArray()
            return results        
    }
},
     
    Mutation: {
        newPost:(parent,args,context,info) =>{
            const { title, body, authorName, authorEmail} = args;
           
            const myBlog = {
                id: uid,
                title,
                body,
                author:{ authorName,
                        authorEmail
                    },
                likes:0,unlikes:0,comments:[] };
        blogs.push(myBlog);
        client.connect()
            const collection = client.db("test").collection("blogs");
            collection.insertOne(myBlog)
            return myBlog           
            },
        updateBlog(parent,args,context,info) {
            const { id, title, body } = args
            client.connect()
            const collection = client.db("test").collection("blogs");
            filter = { id: id }
            if (title !== undefined) {
                    const updateDoc = {
                     $set: {
                        title: title
                    },
                };
                results = collection.updateOne(filter, updateDoc)
            }

            if (body !== undefined) {
                const updateDoc = {
                    $set: {
                        body: body
                    },
                };
                results = collection.updateOne(filter, updateDoc)
            }
            return collection.findOne({ id: id })
        },
        deleteBlog(parent, args, context, info) {
            const { id } = args
            const doc = {
               id: id
            }
            client.connect()
            const collection = client.db("test").collection("blogs");
            try {
                deleteResults = collection.deleteOne(doc)
                return "Blog deleted successfully"
            } catch (e) {
                return `Something went wrong, Error ${e}`
            }

        },
        likeBlog(args) {
            const { id } = args
            client.connect()
            const collection = client.db("test").collection("blogs");
            filter = { id: id }          
            const updateDoc = {
                $inc: {
                    likes: 1
                },
            };
            results = collection.updateOne(filter, updateDoc)
            return collection.findOne(filter)
        },

        unlikeBlog(args) {
            const { id } = args
            client.connect()
            const collection = client.db("test").collection("blogs");
            filter = { id: id }          
            const updateDoc = {
                $inc: {
                    unlikes: 1
                },
            };
            results = collection.updateOne(filter, updateDoc)
            return collection.findOne(filter)
        },
        addComment(args) {
            const { id, comment, authorName, authorEmail } = args
            client.connect()
            const collection = client.db("test").collection("blogs");
            filter = { id: id }
            uid = uuidv4();

            commentObj = {
                commentID: uid,
                comment: comment,
                author: {
                    authorName,
                    authorEmail
                }
            }
            const updateDoc = {
                $push: {
                    comments: {
                        $each: [commentObj]
                    }
                },
            };
            results = collection.updateOne(filter, updateDoc)
            return collection.findOne(filter)
        },

        deleteComment(args) {
            const { commentID } = args

            const doc = {
                commentID: commentID
            }
            client.connect()
            const collection = client.db("test").collection("blogs");
            try {
                deleteResults = collection.deleteOne(doc)
                return "Comment deleted successfully"
            } catch (e) {
                return `Something went wrong, error ${e}`
            }
        }
    }
}

module.exports = blogResolvers;